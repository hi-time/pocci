#!/bin/bash
set -e

BASE_DIR=$(cd $(dirname $0)/..; pwd)
source ${BASE_DIR}/bin/lib/init-env
source ${BASE_DIR}/bin/pocci-utils
BACKUP_DIR=${BASE_DIR}/backup/$(date +%Y%m%d-%H%M)

${LIB_DIR}/save-config "Backup: ${BACKUP_DIR}"
git clone ${CONFIG_DIR}/.git ${BACKUP_DIR}/config

mkdir -p ${BACKUP_DIR}

POCCI_COMMIT_COMMAND="git log -n 1 --format=%H"
DOCKER_VERSION_COMMAND="docker --version"
DOCKER_COMPOSE_VERSION_COMMAND="docker-compose --version"

POCCI_COMMIT=`${POCCI_COMMIT_COMMAND}`
POCCI_TAG=`git tag -l --points-at ${POCCI_COMMIT}`
DOCKER_VERSION=`${DOCKER_VERSION_COMMAND}`
DOCKER_COMPOSE_VERSION=`${DOCKER_COMPOSE_VERSION_COMMAND}`

cat << EOS > ${BACKUP_DIR}/restore-pocci.sh
#!/bin/bash
set -e

CONFIRM=""
if [ "${POCCI_COMMIT}" != "\`${POCCI_COMMIT_COMMAND}\`" ]; then
    echo "Pocci: going to checkout original version : ${POCCI_TAG} (${POCCI_COMMIT})."
    CONFIRM="yes"
fi

if [ "${DOCKER_VERSION}" != "\`${DOCKER_VERSION_COMMAND}\`" ]; then
    echo "[Warning] Docker version is different. original: ${DOCKER_VERSION}, current: \`${DOCKER_VERSION_COMMAND}\`"
    CONFIRM="yes"
fi

if [ "${DOCKER_COMPOSE_VERSION}" != "\`${DOCKER_COMPOSE_VERSION_COMMAND}\`" ]; then
    echo "[Warning] Docker Compose version is different. original: ${DOCKER_COMPOSE_VERSION}, current: \`${DOCKER_COMPOSE_VERSION_COMMAND}\`"
    CONFIRM="yes"
fi

if [ "\${CONFIRM}" = "yes" ]; then
    echo "Are you sure? [yN]"
    read yesno

    case \${yesno} in
        "Y" | "y" )
            echo "";;
        * )
            exit 1;;
    esac

    git checkout ${POCCI_COMMIT}
fi
EOS
chmod +x ${BACKUP_DIR}/restore-pocci.sh

RESTORE_ALL_SCRIPT=${BACKUP_DIR}/restore-all.sh
echo '#!/bin/bash' >${RESTORE_ALL_SCRIPT}
echo 'set -e' >>${RESTORE_ALL_SCRIPT}
echo 'cd $(dirname $0)' >>${RESTORE_ALL_SCRIPT}

CONTAINERS=`docker ps -a |grep 'pocci[s|n]_' |sed -e 's/.*pocci/pocci/'`
FORMAT=""
for i in ${CONTAINERS}; do
    if [ -z "${FORMAT}" ]; then
        FORMAT=`get-format-of-volume $i`
    fi

    IGNORES=`docker inspect --format='{{index .Config.Labels "com.xpfriend.pocci.backup-ignore"}}' $i`
    VOLUMES=`docker inspect --format="${FORMAT}" $i |grep -E '/_data$' |tr '\n' ' '`
    if [ -z "${VOLUMES}" ]; then
        echo "Skip backup: $i"
    else
        if [ -d /tmp/$i ]; then
            sudo rm -fr /tmp/$i
        fi
        TARGET_DIRS=""
        for j in ${VOLUMES}; do
            SOURCE_DIR=`echo "$j" |cut -f2 -d :`
            TARGET_DIR=`echo "$j" |cut -f1 -d :`
            if [ `echo " ${IGNORES} " |grep " ${TARGET_DIR} " |wc -l` -eq 0 ]; then
                TARGET_DIRS="${TARGET_DIRS} ${TARGET_DIR}"
                echo "Backup: $i:${TARGET_DIR}"
                if [ -f ${BACKUP_DIR}/$i.tar ]; then
                    sudo sh -c "cd ${SOURCE_DIR};tar rf ${BACKUP_DIR}/$i.tar --transform='s,^\./,${TARGET_DIR}/,g' ."
                else
                    sudo sh -c "cd ${SOURCE_DIR};tar cf ${BACKUP_DIR}/$i.tar --transform='s,^\./,${TARGET_DIR}/,g' ."
                fi
            else
                echo "Skip backup: $i:${TARGET_DIR}"
            fi
        done
        sudo rm -fr /tmp/$i
        sudo chown `id -un`:`id -gn` ${BACKUP_DIR}/$i.tar

        RESTORE_SCRIPT=${BACKUP_DIR}/restore-$i.sh
        RESTORE_COMMAND='docker run --name poccir_restore --volumes-from '$i' -v ${BACKUP_DIR}:/backup --rm xpfriend/jenkins-slave-base:'${VERSION_JENKINS_SLAVE_BASE}' sudo bash -c "cd /;find '${TARGET_DIRS}' -mindepth 1 -delete;tar xf /backup/'$i'.tar"'
        echo '#!/bin/bash' >${RESTORE_SCRIPT}
        echo 'set -ex' >>${RESTORE_SCRIPT}
        echo 'BACKUP_DIR=$(cd $(dirname $0); pwd)' >>${RESTORE_SCRIPT}
        echo ${RESTORE_COMMAND} >>${RESTORE_SCRIPT}
        chmod +x ${RESTORE_SCRIPT}
        echo "./restore-$i.sh" >>${RESTORE_ALL_SCRIPT}
    fi
done

chmod +x ${RESTORE_ALL_SCRIPT}
